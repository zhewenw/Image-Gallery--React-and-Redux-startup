'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.takeEvery = takeEvery;
exports.takeLatest = takeLatest;

var _utils = require('./utils');

var _io = require('./io');

var _SagaCancellationException = require('./SagaCancellationException');

var _SagaCancellationException2 = _interopRequireDefault(_SagaCancellationException);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var resume = function resume(fnOrValue, arg) {
  return _utils.is.func(fnOrValue) ? fnOrValue(arg) : fnOrValue;
};
var done = { done: true };

function fsmIterator(fsm, nextState) {
  var _iterator;

  var aborted = undefined,
      updateState = undefined;

  function next(arg, error) {
    if (aborted) return done;

    if (error) {
      aborted = true;
      if (!(error instanceof _SagaCancellationException2.default)) throw error;
      return done;
    } else {
      if (updateState) updateState(arg);

      var _fsm$nextState = _slicedToArray(fsm[nextState], 3);

      var output = _fsm$nextState[0];
      var transition = _fsm$nextState[1];
      var _updateState = _fsm$nextState[2];

      updateState = _updateState;
      nextState = resume(transition, arg);
      return resume(output, arg);
    }
  }

  var iterator = (_iterator = {}, _defineProperty(_iterator, Symbol.iterator, function () {
    return iterator;
  }), _defineProperty(_iterator, 'next', next), _defineProperty(_iterator, 'throw', function _throw(error) {
    return next(null, error);
  }), _iterator);
  return iterator;
}

function takeEvery(pattern, worker) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yieldTake = { done: false, value: (0, _io.take)(pattern) };
  var yieldFork = function yieldFork(action) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [action])) };
  };

  return fsmIterator({
    'take': [yieldTake, 'fork'],
    'fork': [yieldFork, 'take']
  }, 'take');
}

function takeLatest(pattern, worker) {
  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  var yieldTake = { done: false, value: (0, _io.take)(pattern) };
  var yieldFork = function yieldFork() {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [currentAction])) };
  };
  var yieldCancel = function yieldCancel() {
    return { done: false, value: (0, _io.cancel)(currentTask) };
  };
  var forkOrCancel = function forkOrCancel() {
    return currentTask ? 'cancel' : 'fork';
  };

  var currentTask = undefined,
      currentAction = undefined;
  return fsmIterator({
    'take': [yieldTake, forkOrCancel, function (action) {
      return currentAction = action;
    }],
    'cancel': [yieldCancel, 'fork'],
    'fork': [yieldFork, 'take', function (task) {
      return currentTask = task;
    }]
  }, 'take');
}